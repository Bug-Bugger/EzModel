name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.24.1"

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: ezmodel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: backend/go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Verify dependencies
        working-directory: ./backend
        run: go mod verify

      - name: Check formatting
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        working-directory: ./backend
        run: go vet ./...

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          DB_NAME: ezmodel_test
          DB_SSLMODE: disable
          JWT_SECRET: test-secret-key-for-testing-only
          JWT_ACCESS_TOKEN_EXP: 15m
          JWT_REFRESH_TOKEN_EXP: 168h
          PORT: 8080
          ENV: test
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.out
          directory: ./backend
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Build application
        working-directory: ./backend
        run: |
          go build -v -ldflags="-s -w" -o bin/ezmodel cmd/api/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ezmodel-binary
          path: backend/bin/ezmodel
          retention-days: 7

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_OKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: false # Disable deployment for now
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/downlToad-artifact@v4
        with:
          name: ezmodel-binary
          path: ./artifacts

      - name: Deploy to Digital Ocean
        run: |
          echo "ðŸš€ Deploying to Digital Ocean..."

          # Create SSH directory
          mkdir -p ~/.ssh

          # Add SSH key
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

          # Deploy using SSH
          ssh ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd /opt/ezmodel

            # Pull latest docker-compose files
            git pull origin main

            # Pull latest Docker image
            docker pull ghcr.io/${{ github.repository }}:latest

            # Update and restart services
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d

            # Wait for services to be ready
            sleep 10

            # Health check
            curl -f http://localhost:8080/health || exit 1

            echo "âœ… Deployment completed successfully"
          EOF

      - name: Deployment Success Notification
        if: success()
        run: |
          echo "âœ… Deployment completed successfully"
          echo "Version: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Server: ${{ secrets.DO_HOST }}"
